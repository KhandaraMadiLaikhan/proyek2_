#include <WiFi.h>
#include <HTTPClient.h>
#include <DFRobotDFPlayerMini.h>

// WiFi credentials
const char* ssid = "WiFi-SSID"; // Ganti dengan SSID WiFi Anda
const char* password = "WiFi-PASSWORD"; // Ganti dengan password WiFi Anda

// Server URL
const char* serverUrl = "http://your-laravel-server-url.com/api/movements"; // Ganti dengan URL API Laravel Anda

// Sensor PIR
const int pirPin = 15; // Pin PIR pada ESP32 (GPIO15)

// DFPlayer Mini
#include <SoftwareSerial.h>
SoftwareSerial mySerial(16, 17); // TX = GPIO16, RX = GPIO17
DFRobotDFPlayerMini myDFPlayer;

// Variabel untuk menyimpan status PIR
bool pirDetected = false;

void setup() {
  // Inisialisasi serial monitor
  Serial.begin(115200);

  // Inisialisasi PIR sensor
  pinMode(pirPin, INPUT);

  // Inisialisasi WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Menghubungkan ke WiFi...");
  }
  Serial.println("WiFi Terhubung!");

  // Inisialisasi DFPlayer Mini
  mySerial.begin(9600);
  if (!myDFPlayer.begin(mySerial)) {
    Serial.println("Tidak dapat menginisialisasi DFPlayer Mini!");
    while (true);
  }
  myDFPlayer.volume(20); // Set volume DFPlayer (0-30)
}

void loop() {
  // Cek apakah PIR mendeteksi gerakan
  int pirStatus = digitalRead(pirPin);
  if (pirStatus == HIGH && !pirDetected) {
    pirDetected = true; // Set status PIR
    Serial.println("Gerakan terdeteksi!");

    // Mainkan file audio
    myDFPlayer.play(1); // Mainkan file audio nomor 1 pada microSD

    // Kirim data ke server
    if (WiFi.status() == WL_CONNECTED) {
      sendDataToServer();
    } else {
      Serial.println("WiFi tidak terhubung, tidak dapat mengirim data.");
    }
  } else if (pirStatus == LOW) {
    pirDetected = false;
  }

  delay(500); // Delay untuk debounce
}

void sendDataToServer() {
  HTTPClient http;
  http.begin(serverUrl);
  http.addHeader("Content-Type", "application/json");

  // Buat data dalam format JSON
  String jsonData = "{\"jumlah\":1,\"waktu\":\"" + getTimestamp() + "\"}";

  // Kirim POST request
  int httpResponseCode = http.POST(jsonData);
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println("Data berhasil dikirim!");
    Serial.println(response);
  } else {
    Serial.println("Gagal mengirim data, kode error: " + String(httpResponseCode));
  }

  http.end();
}

String getTimestamp() {
  // Buat timestamp manual (atau gunakan RTC jika tersedia)
  return "2024-12-21 12:00:00"; // Ganti dengan fungsi RTC jika diperlukan
}
